// Hide old versions of overhauled parts

@PART[liquidEngine,liquidEngine2,liquidEngine3,mk1pod,fuelTankSmallFlat,fuelTankSmall,fuelTank,fuelTank_long]
{
  %TechRequired = unresearchable
	%category = none
}

// Rename part variants

@PART[mk1pod]{
  @title = Mk1-Z Command Pod
}

@PART[fuelTankSmallFlat]{
  @title = FL-T100-Z Fuel Tank
}

@PART[fuelTankSmall]{
  @title = FL-T200-Z Fuel Tank
}

@PART[fuelTank]{
  @title = FL-T400-Z Fuel Tank
}

@PART[fuelTank_long]{
  @title = FL-T800-Z Fuel Tank
}

@PART[liquidEngineT15]{
  @title = LV-T15-A "Valiant" Liquid Fuel Engine
}

@PART[liquidEngineT15_Boattail]{
  @title = LV-T15-B "Valiant" Liquid Fuel Engine
}

@PART[liquidEngineT30]{
  @title = LV-T30-A "Reliant" Liquid Fuel Engine
}

@PART[liquidEngineT30_Boattail]{
  @title = LV-T30-B "Reliant" Liquid Fuel Engine
}

@PART[liquidEngine]{
  @title = LV-T30-Z "Reliant" Liquid Fuel Engine
}

@PART[liquidEngineT45]{
  @title = LV-T45-A "Swivel" Liquid Fuel Engine
}

@PART[liquidEngineT45_Boat]{
  @title = LV-T45-B "Swivel" Liquid Fuel Engine
}

@PART[liquidEngine2]{
  @title = LV-T45-Z "Swivel" Liquid Fuel Engine
}

@PART[liquidEngine303]{
  @title = LV-303-A "Pug" Liquid Fuel Engine
}

@PART[liquidEngine303_Boattail]{
  @title = LV-303-B "Pug" Liquid Fuel Engine
}

@PART[liquidEngine909]{
  @title = LV-909-A "Terrier" Liquid Fuel Engine
}

@PART[liquidEngine909_Boattail]{
  @title = LV-909-B "Terrier" Liquid Fuel Engine
}

@PART[liquidEngine3]{
  @title = LV-909-Z "Terrier" Liquid Fuel Engine
}

// Add testing contracts to overhauled parts

@PART[liquidEngineT15,liquidEngineT15_Boattail,liquidEngineT30,liquidEngineT30_Boattail,liquidEngineT45,liquidEngineT45_Boat,liquidEngine303,liquidEngine303_Boattail,liquidEngine909,liquidEngine909_Boattail]:HAS[!MODULE[ModuleTestSubject]]{
  MODULE
	{
		name = ModuleTestSubject
		useStaging = True
		useEvent = True
		situationMask = 127
		CONSTRAINT
		{
			type = REPEATABILITY
			value = ALWAYS
			prestige = Trivial
		}
		CONSTRAINT
		{
			type = REPEATABILITY
			value = BODYANDSITUATION
			prestige = Significant
		}
		CONSTRAINT
		{
			type = REPEATABILITY
			value = ONCEPERPART
			prestige = Exceptional
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = GT
			value = 4000
			prestige = Trivial
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = LT
			value = 8000
			prestige = Trivial
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = GT
			value = 2000
			prestige = Significant
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = LT
			value = 4000
			prestige = Significant
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = GT
			value = 1000
			prestige = Exceptional
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = LT
			value = 2000
			prestige = Exceptional
		}
		CONSTRAINT
		{
			type = ALTITUDE
			test = GT
			value = 0 // this just registers altitude as something to care about
			situationMask = 8
		}
		CONSTRAINT
		{
			type = ALTITUDE
			test = LT
			value = 300000
			situationMask = 16
			body = _NotSun
		}
		CONSTRAINT
		{
			type = ALTITUDE
			test = LT
			value = 600000
			situationMask = 32
			body = _NotSun
		}
		CONSTRAINT
		{
			type = SPEED
			test = GT
			value = 0
			situationMask = 8
			prestige = Trivial
		}
		CONSTRAINT
		{
			type = SPEED
			test = LT
			value = 600
			situationMask = 8
			prestige = Trivial
		}
		CONSTRAINT
		{
			type = SPEED
			test = GT
			value = 300
			situationMask = 8
			prestige = Significant
		}
		CONSTRAINT
		{
			type = SPEED
			test = LT
			value = 1200
			situationMask = 8
			prestige = Significant
		}
		CONSTRAINT
		{
			type = SPEED
			test = GT
			value = 600
			situationMask = 8
			prestige = Exceptional
		}
		CONSTRAINT
		{
			type = SPEED
			test = LT
			value = 2500
			situationMask = 8
			prestige = Exceptional
		}
		CONSTRAINT
		{
			type = SPEEDENV
			test = LT
			value = 200
			prestige = Trivial
		}
		CONSTRAINT
		{
			type = SPEEDENV
			test = GT
			value = 100
			prestige = Trivial
		}
		CONSTRAINT
		{
			type = SPEEDENV
			test = LT
			value = 100
			prestige = Significant
		}
		CONSTRAINT
		{
			type = SPEEDENV
			test = GT
			value = 50
			prestige = Significant
		}
		CONSTRAINT
		{
			type = SPEEDENV
			test = LT
			value = 50
			prestige = Exceptional
		}
		CONSTRAINT
		{
			type = SPEEDENV
			test = GT
			value = 20
			prestige = Exceptional
		}
	}
}
